#!/usr/bin/env python3
from data import u_value, j_value
from data import c6dict, r0dict
import sys, os
from lattice import *
'''
There are five parts in this module:
1) the standard INCAR parameters 
2) the input parameters for specific calculations, 
3) parameter update functions for some special parameters need to be settled in consistent with POSCAR 
4) write the INCAR file    
5) INCAR modification: change, add, or delete parameters
Generally specaking, by following the same format, the user can modify this module very easily.
'''

## Part1: Standard_incar has the parameters for surface related optimizations 
standard_incar = {
'd_system' : {'SYSTEM':'Generated By Q_robot'},
'd_start'  : {'PREC':'N','ISTART':'0','ICHARG':'2','GGA': 'PE'},
'd_elec'   : {'ISPIN':'1','ENCUT':'450','NELM':'100','EDIFF':'1E-05','LREAL':'AUTO', 'ALGO':'F'},
'd_ionic'  : {'EDIFFG':'-0.03','NSW':'500','IBRION':'2','POTIM':'0.10','ISIF':'2','ISYM':'2'},
'd_ismear' : {'ISMEAR':'0','SIGMA':'0.10'}, 
'd_write'  : {'LWAVE':'F','LCHARG':'F','LVHAR':'F','LORBIT':'11','NWRITE':'0'},
'd_lapack' : {'LSCALAPACK': 'F'},
'd_ncore'  : {'NCORE': '2'}
}

## Part2: tasks_incar has the parameters for specific calculations
'''The user can add his own calculations by following the same format as below '''
tasks_incar = {  
'd_cal_single'      : {'NSW':'0'},
'd_cal_dos'         : {'ISMEAR':'0','SIGMA':'0.05', 'NEDOS':'3000'},
'd_cal_electronic'  : {'LAECHG':'T','LCHARG':'T','LWAVE':'T','LORBIT':'11','NEDOS':'3000'},
'd_cal_workfunction': {'LVHAR':'T'},
#'d_cal_workfunction': {'LAECHG':'T','LCHARG':'T','LWAVE':'T','LORBIT':'11','NEDOS':'3000', 'LVHAR':'T'},
'd_cal_md'          : {'IBRION': '0','TEBEG':'273','TEEND':'273','SMASS':'0', 'NBLOCK': '20','POTIM':'1','NSW': '5000'} ,
'd_cal_gas'         : {'ISMEAR': '0','SIGMA': '0.01'},
'd_cal_bulk'        : {'ISIF':'3', 'ENCUT':'700','LDIPOL': 'F'},
'd_cal_dftu'        : {'LDAU':'T','LDAUTYPE':'2','LASPH': 'T','LDAUPRINT':'0', 'LMAXMIX':'4'},
'd_cal_dipole'      : {'LDIPOL':'T','IDIPOL':'3'},
'd_cal_tsopt'       : {'IBRION':'1','POTIM': '0.1'},
'd_cal_neb'         : {'LSCALAPACK':'F','LTANGENTOLD':'F', 'LCLIMB':'T','SPRING':'-10', 'IBRION':'1', 'EDIFFG':'-0.03', 'POTIM':'0.15'},
'd_cal_dimer'       : {'IBRION':'44','EDIFFG':'-0.03','POTIM':'0.10','FINDIFF':'2','DIMER_DIST':'0.01', 'MINROT':'0.0087266',
                      'STEP_SIZE':'0.01', 'STEP_MAX':'0.10', 'NSW':'500'},
'd_cal_freq'        : {'IBRION':'5','POTIM':'0.015','NFREE': '2','EDIFF': '1E-7','NWRITE': '2'},
'd_cal_vdW-No'      : {},
'd_cal_vdwD2'      : {'LVDW':'T', 'VDW_VERSION':'2', 'VDW_RADIUS':'40', 'VDW_SCALING':'0.75'},
'd_cal_vdwD3zero'  : {'IVDW':'11' },
'd_cal_vdwD3bj'    : {'IVDW':'12' },
'd_cal_vdwoptB86b' : {'GGA':'MK','PARAM1':'0.1234','PARAM2':'1.0000','LUSE_VDW':'.TRUE.','AGGAC':'0.0000','LASPH':'.TRUE.'},
'd_cal_vdwoptB88'  : {'GGA':'BO','PARAM1':'0.1833333333','PARAM2':'0.2200000000','LUSE_VDW':'.TRUE.','AGGAC':'0.0000','LASPH':'.TRUE.'},
'd_cal_vdwoptPBE'  : {'GGA':'OR','LUSE_VDW':'.TRUE.','AGGAC':'0.0000','LASPH':'.TRUE.'},
'd_cal_vdwDF2'     : {'GGA':'ML','LUSE_VDW':'.TRUE.','Zab_vdW':'-1.8867','AGGAC':'0.0000','LASPH':'.TRUE.'},
'd_cal_vdwDF'      : {'GGA':'RE','LUSE_VDW':'.TRUE.','AGGAC':'0.0000','LASPH':'.TRUE.'},
'd_cal_vdwrevDF2'  : {'GGA':'MK','LUSE_VDW':'.TRUE.','PARAM1':'0.1234','PARAM2':'0.711357','Zab_vdW':'-1.8867','AGGAC':'0.0000','LASPH':'.TRUE.'},
'd_cal_vdwSCAN'    : {'METAGGA':'SCAN','LUSE_VDW':'.TRUE.','BPARAM':'15.7','LASPH':'.TRUE.','ADDGRID':'.TRUE.'},
'd_cal_vdwTS2'     : {'PREC': 'A', 'IVDW':'2'},
'd_cal_vdwTS202'   : {'PREC': 'A', 'IVDW':'202'},
'd_cal_vdwTS21'    : {'PREC': 'A', 'IVDW':'21'},
'd_cal_vdwTS4'     : {'PREC': 'A', 'IVDW':'4'},
'd_cal_ispin'       : {'ISPIN':'2'},
'd_cal_pbe0'        : {'LHFCALC':'T','GGA':'PE','AEXX':'0.25','AGGAC':'1.0','ALDAC':'1.0'},
'd_cal_hse03'       : {'LHFCALC':'T','GGA':'PE','AEXX':'0.25','HFSCREEN':'0.3','AGGAC':'1.0','ALDAC':'1.0'},
'd_cal_hse06'       : {'LHFCALC':'T','GGA':'PE','AEXX':'0.25','HFSCREEN':'0.2','AGGAC':'1.0','ALDAC':'1.0'},
'd_cal_b3lyp'       : {'LHFCALC':'T','GGA':'B3','AEXX':'0.20','AGGAX':'0.72','AGGAC':'0.81','ALDAC':'0.19'},
'd_cal_hf'          : {'LHFCALC':'T','AEXX':'1.0','AGGAC':'0.0','ALDAC':'0.0'},
#'d_cal_yours        : {'item':'Parameter'},  # change 'yours' to the task name and add the parameters to the dictionary
}

tasks_recorded = [i.split('_')[2].lower() for i in tasks_incar.keys()]

## Functions to modify the parameters in INCAR file according to the POSCAR
def check_pos_car():
    is_poscar_here = True
    if os.path.isfile('POSCAR'):
        lines = read_car('POSCAR')[0] 
        ele_list =  lines[5].rstrip().split()  ## Read the element line
    elif os.path.isfile('./01/POSCAR'):
        lines = read_car('./01/POSCAR')[0] 
        ele_list =  lines[5].rstrip().split()  ## Read the element line
    else:
        is_poscar_here = False
        print('POSCAR Not Found. Becareful about the D2, DFT+U parameters')                
    return is_poscar_here, ele_list    

def dftu_update(dftu):
    ''' u_value and j_value are two dictionaries imported from the data.py file''' 
    ldaul = []
    u = []
    j = []
    is_poscar_here, ele_list = check_pos_car()
    if is_poscar_here: 
        for i in ele_list: 
            if i in u_value.keys():
                ldaul.append(2)
                u.append(u_value.get(i))  
                j.append(j_value.get(i))
            else: 
                ldaul.append(-1)
                u.append(0)
                j.append(0)
    value_ldaul = '  '.join(str(i) for i in ldaul) 
    value_u     = '  '.join(str(i) for i in u)        
    value_j     = '  '.join(str(i) for i in j)
    dftu.update({'LDAUL': value_ldaul}) 
    dftu.update({'LDAUU': value_u})
    dftu.update({'LDAUJ': value_j})
    
    return dftu

def vdWD2_update(vdWD2):
    '''c6dict and r0dict are two dictionaries imported from the data.py file  '''
    C6_l = []
    R0_l = []
    is_poscar_here, ele_list = check_pos_car()
    if is_poscar_here:     
        for i in ele_list:
            C6_l.append(c6dict.get(i))
            R0_l.append(r0dict.get(i))
    value_c6 = '  '.join(str(i) for i in C6_l)    
    value_r0 = '  '.join(str(i) for i in R0_l)
    vdWD2.update({'VDW_C6': value_c6})
    vdWD2.update({'VDW_R0': value_r0})
    return vdWD2

def neb_update(neb):
    ''' Add the IMAGE numbers to NEB calculation'''
    folders = [f for f in os.listdir('.') if os.path.isdir(f)]
    images =  len([i  for i in folders if i.isdigit()]) -2 
    neb.update({'IMAGES':str(images)})
    return neb

## chcek tasks from the user's command 

def analyze_tasks(tasks):
    vdw_list = []
    for task in tasks:
        if 'vdw' in task.lower():
            vdw_list.append(task)
        if 'scan' in task.lower():
            print('vasp.5.4.3 or higher version is needed for METAGGA = SCAN functional')
            print('See:  https://cms.mpi.univie.ac.at/wiki/index.php/METAGGA')
    if len(vdw_list) >= 2:
        print('You can not set more than two vdW types at the same time')
        print(' '.join(tasks))
        print('Confirm your vdW type and rerun the in.py command')
        exit()    
    
    dict_tasks = {}
    dict_task_groups = {}
    for i in tasks:
        if i in tasks_recorded:      
            for k_task, v_task in tasks_incar.items():
                if i == k_task.split('_')[2].lower():
                    if i == 'dftu':
                        dftu_update(v_task)                    
                    if i == 'vdwd2':
                        vdWD2_update(v_task)
                    if i == 'neb':
                        neb_update(v_task)
                    if i in ['vdwoptb86b', 'vdwoptb88', 'vdwdf2', 'vdwdf', 'vdwoptpbe', 'vdwrevdf2']:
                        print('Reminder: Copy vdw_kernel.bindat file to your job folder!\n' *3)
                    for k, v in v_task.items():
                        dict_tasks.update({k:v})          
                    dict_task_groups.update({k_task : v_task})    
        else:
            print('Please use the keywords to specify your tasks:\n\n')
            print(tasks_recorded)
            print('\n\n')
#            print('Common used inputs are: \n')
#            print('electronic, vdWD2, vdWD3, ispin, dftu, tsopt, neb, dimer, freq')
    return dict_tasks, dict_task_groups

def generate_incar(standard_incar, dict_tasks, dict_task_groups):
    '''Creat INCAR file. ''' 
    incar_out = open('INCAR', 'w')
    for k_std, v_std in standard_incar.items():
        ''' Write the standard incar parameters ''' 
        incar_out.write('%s\n' %(k_std.upper().replace('D_', '#')))
        for k, v in v_std.items():
            if k not in dict_tasks.keys():
                '''Write the parameters are not affected by the user's task'''
                incar_out.write('%s = %s \n' %(k, v))
        incar_out.write('\n')
    
    for k_task, v_task in dict_task_groups.items():
        ''' Write the specific parameters for the tasks'''
        incar_out.write('\n%s \n' %(k_task.upper().replace('D_', '#')))
        for k, v in v_task.items():
            incar_out.write('%s = %s \n' %(k, v))
    incar_out.close()        

def incar_alter(parameter, value):
    '''Change the parameter values, if the parameter is not in the INCAR, then add it. '''
    f = open('INCAR', 'r')
    lines = f.readlines()
    f.close()
    is_or_not = False 
    with open('INCAR') as myfile:
        if parameter in myfile.read():
            is_or_not = True
    if is_or_not:   
        f = open('INCAR', 'w')
        for line in lines:
            if parameter in line:
                f.write('%s = %s\n' %(parameter, value))
            else:
                f.write(line)
        f.close()    
    else:
        f = open('INCAR', 'a+')
        f.write('%s = %s\n' %(parameter, value))
        f.close()
        
def incar_delete(parameter):
    '''Delete the parameter from INCAR file '''
    f = open('INCAR', 'r')
    lines = f.readlines()
    f.close()
    f = open('INCAR', 'w')
    for line in lines:
        if parameter not in line:
            f.write(line)
    f.close()    

def set_ncore(ncore):
    '''NCORE/paralization can not be used for frequency calculations '''
    if not os.path.isfile('INCAR'):
        print('No INCAR found. Can not add the NCORE parameter to it.')
    else:    
        file_in = open('INCAR', 'r')
        lines = file_in.readlines()
        file_in.close()
        for line in lines:
            if 'IBRION' in line:
                value = line.rstrip().split('=')[1].strip()
                if value not in ['5', '6', '7', '8']:
                    incar_alter('NCORE', ncore)
                else:
                    incar_delete('NCORE')    
